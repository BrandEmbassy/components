import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames/bind';
import styles from './Dropdown.css';
import DropdownToggle from './../DropdownToggle/DropdownToggle';

const cx = classNames.bind(styles);

export default class Dropdown extends Component {
  constructor() {
    super();

    this.handleClick = this.handleClick.bind(this);
    this.handleOutsideClick = this.handleOutsideClick.bind(this);

    this.state = {
      popupVisible: false
    };
  }

  static get propTypes() {
    return {
      children: PropTypes.Array,
      styleName: PropTypes.string 
    };
  };

  handleClick() {
    console.log('handleclick');
    if (!this.state.popupVisible) {
      
      // attach/remove event handler
      document.addEventListener('click', this.handleOutsideClick, false);
    } else {
      document.removeEventListener('click', this.handleOutsideClick, false);
    }

    this.setState(prevState => ({
       popupVisible: !prevState.popupVisible,
    }));
  }
  
  handleOutsideClick(e) {
    console.log('outside', e.target, this.refs.test);
    // ignore clicks on the component itself
    if (this.refs.test.contains(e.target)) {
      return;
    }

    this.handleClick();
  }

  getToggleComponent(children) {
    return children.filter(child => child.type.name === "DropdownToggle")[0];
  }

  // setToggleProps() {
  //   const toggle = this.getToggleComponent(this.props.children);
  //   console.log(toggle);
  //   toggle.props.isOpen = this.state.popupVisible;
  // }

  renderChildren() {
    const {children} = this.props;

    if (!this.state.popupVisible) {
      return null;
    }
    return children;
  }

  render() {
    const { styleName } = this.props;

    const className = cx(styles.Dropdown, styleName);

    return (
      <div className={className} onClick={this.handleClick} ref="test">
        <DropdownToggle>
          {this.props.toggleDefault}
        </DropdownToggle>
        {this.renderChildren()}
      </div>
    );
  }
}
